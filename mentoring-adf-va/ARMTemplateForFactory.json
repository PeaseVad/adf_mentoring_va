{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-va"
		},
		"LS_ABLB_Azurementoringauva_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABLB_Azurementoringauva'"
		},
		"LS_ASQL_DataMart_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_DataMart'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-va.database.windows.net;Initial Catalog=DataMart;User ID=pasevad"
		},
		"LS_ASQL_MoviesDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_MoviesDB'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-va.database.windows.net;Initial Catalog=movies;User ID=pasevad@azure-mentoring-va"
		},
		"LS_SQL_CinemaTickets_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_CinemaTickets'",
			"defaultValue": "Integrated Security=False;Data Source=EPUAKYIW1670\\MSSQLSERVER2022;Initial Catalog=CinemaTickets;User ID=sa"
		},
		"LS_ABLB_Azurementoringstorageva_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "sas-url-movies"
		},
		"LS_ADLS_Azurementoringdatalakeva_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeva.dfs.core.windows.net"
		},
		"LS_ADLS_AzurementoringstoragevaOnline_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "sas-url-online"
		},
		"LS_AKV_Mentoring_key_vault_va_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-va.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).fileSystem}/@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": {
																		"value": "@json(item().CopySourceSettings).recursive",
																		"type": "Expression"
																	},
																	"wildcardFileName": {
																		"value": "@json(item().CopySourceSettings).wildcardFileName",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": {
																		"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																		"type": "Expression"
																	}
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings",
																	"skipLineCount": {
																		"value": "@json(item().CopySourceSettings).skipLineCount",
																		"type": "Expression"
																	}
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_jo3_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_columnDelimiter": {
																		"value": "@json(item().SourceObjectSettings).columnDelimiter",
																		"type": "Expression"
																	},
																	"cw_rowDelimiter": {
																		"value": "@json(item().SourceObjectSettings).rowDelimiter",
																		"type": "Expression"
																	},
																	"cw_escapeChar": {
																		"value": "@json(item().SourceObjectSettings).escapeChar",
																		"type": "Expression"
																	},
																	"cw_quoteChar": {
																		"value": "@json(item().SourceObjectSettings).quoteChar",
																		"type": "Expression"
																	},
																	"cw_firstRowAsHeader": {
																		"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SourceObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SourceObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_jo3_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).fileSystem}/@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": {
																"value": "@json(item().CopySourceSettings).recursive",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@json(item().CopySourceSettings).wildcardFileName",
																"type": "Expression"
															},
															"enablePartitionDiscovery": {
																"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"skipLineCount": {
																"value": "@json(item().CopySourceSettings).skipLineCount",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_jo3_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_columnDelimiter": {
																"value": "@json(item().SourceObjectSettings).columnDelimiter",
																"type": "Expression"
															},
															"cw_rowDelimiter": {
																"value": "@json(item().SourceObjectSettings).rowDelimiter",
																"type": "Expression"
															},
															"cw_escapeChar": {
																"value": "@json(item().SourceObjectSettings).escapeChar",
																"type": "Expression"
															},
															"cw_quoteChar": {
																"value": "@json(item().SourceObjectSettings).quoteChar",
																"type": "Expression"
															},
															"cw_firstRowAsHeader": {
																"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																"type": "Expression"
															},
															"cw_fileName": {
																"value": "@json(item().SourceObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SourceObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_fileSystem": {
																"value": "@json(item().SourceObjectSettings).fileSystem",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_jo3_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T18:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_jo3_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_jo3_DestinationDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_jo3_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_jo3_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-29T18:31:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_jo3_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_jo3_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_jo3_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_jo3_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.MainControlTable_jo3"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2023-05-29T18:31:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_jo3_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_jo3_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ABLB_Movies_To_DS_ADLS_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_META_FilesList",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SETVAR_CurentDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_MoviesBin",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ACT_ITRC_FOR_FileName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_GEN_META_FilesList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "receiver",
								"value": "vad.pasechnik@gmail.com"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GEN_META_FilesList').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CP_ABLB_Movies_To_DS_ADLS_Movies",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS_Azurementoringdatalakeva",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_MoviesBin",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_MoviesBin",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(substring(item().Name, 0, lastIndexOf(item().Name, '.')),'_', variables('CurentDate'),'.', last(split(item().Name, '.')))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Email_Success",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "CP_ABLB_Movies_To_DS_ADLS_Movies",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('GetSecret').output.value",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n    \"subject\" : \"Pipeline @{pipeline().Pipeline} run successfully.\", \n    \"message\" : \"Pipeline ID @{pipeline().RunId} run on @{pipeline().DataFactory}.\",\n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n   }",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Email_Failed",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "CP_ABLB_Movies_To_DS_ADLS_Movies",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('GetSecret').output.value",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\n     \"subject\" : \"Pipeline @{pipeline().Pipeline} run failed.\",  \n     \"message\" : \"Pipeline ID @{pipeline().RunId} run on @{pipeline().DataFactory} failed with error @{string(activity('CP_ABLB_Movies_To_DS_ADLS_Movies').output.errors)}\",\n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n   }",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_GEN_SETVAR_CurentDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetSecret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurentDate",
							"value": {
								"value": "@utcnow('yyyyMMddhhmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSecret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().globalParameters.key_vault_url,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "vad.pasechnik@gmail.com"
					}
				},
				"variables": {
					"CurentDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:26:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_MoviesBin')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_MoviesBin')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ABLB_Online_To_DS_ADLS_Online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_DATA_DS_ABLB_Online_To_DS_ADLS_Movies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_SQL_WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{activity('LKP_SQL_WaterMark').output.firstRow.OldWatermarkValue}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@variables('CurentDate')",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_Online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_LakeOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LKP_SQL_WaterMark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SETVAR_CurentDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT WatermarkValue as OldWatermarkvalue FROM [dbo].[WatermarkTable]\nwhere TableName ='OnlineSrc'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ACT_GEN_SETVAR_CurentDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurentDate",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CP_DATA_DS_ABLB_Online_To_DS_ADLS_Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@variables('CurentDate')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "OnlineSrc",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_MoviesDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CurentDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-14T17:05:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Online')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_LakeOnline')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_WatermarkTable')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ABLB_Ratings_To_DS_ADLS_Ratings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_ABLB_Ratings_To_DS_ADLS_Ratings",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_Ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T19:23:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Ratings')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ADLS_METADATA_DRIVEN_TO_ASQL_MOVIES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LKP_GET_META_INFO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [src_container]\n      ,[src_folder]\n      ,[src_file_name]\n      ,[src_column_delimiter]\n      ,[src_encoding]\n      ,[src_escape_character]\n      ,[src_quote_character]\n      ,[tgt_schema_name]\n      ,[tgt_table_name]\n      ,[column_mapping]\n      ,[diu_value]\n  FROM [etl].[tControlMetadata]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_Movies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP_GET_META_INFO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP_GET_META_INFO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CP_DYN_FILES",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LKP_START_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().src_folder",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().src_file_name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().tgt_schema_name,'.', item().tgt_table_name)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().diu_value ",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().column_mapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_DynamicFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@item().src_container",
													"type": "Expression"
												},
												"folder": {
													"value": "@item().src_folder",
													"type": "Expression"
												},
												"file_name": {
													"value": "@item().src_file_name",
													"type": "Expression"
												},
												"column_delimiter": {
													"value": "@item().src_column_delimiter",
													"type": "Expression"
												},
												"encoding": {
													"value": "@item().src_encoding",
													"type": "Expression"
												},
												"escape_character": {
													"value": "@item().src_escape_character",
													"type": "Expression"
												},
												"quote_character": {
													"value": "@item().src_quote_character",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_MoviesDB",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().tgt_table_name",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().tgt_schema_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LKP_START_LOG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[etl].[usp_InsertEtlLog]",
											"storedProcedureParameters": {
												"ComponentName": {
													"type": "String",
													"value": "CP_DYN_FILES"
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												"StartTime": {
													"type": "DateTime",
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													}
												},
												"Status": {
													"type": "String",
													"value": "'Started'"
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_Movies",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SP_SAVE_SUCCESS_LOG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CP_DYN_FILES",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[usp_UpdateEtlLog]",
										"storedProcedureParameters": {
											"BillingDuration": {
												"value": {
													"value": "@float(activity('CP_DYN_FILES').output.billingReference.billableDuration[0].duration)",
													"type": "Expression"
												},
												"type": "Double"
											},
											"BillingMeterType": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"BillingUnit": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.copyDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataRead": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.dataRead",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.dataWritten",
													"type": "Expression"
												},
												"type": "String"
											},
											"EndTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"EtlLogId": {
												"value": {
													"value": "@int(activity('LKP_START_LOG').output.firstRow.EtlLogId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FilesRead": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.filesRead",
													"type": "Expression"
												},
												"type": "String"
											},
											"ParallelCopiesValues": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].usedParallelCopies",
													"type": "Expression"
												},
												"type": "String"
											},
											"QueueDuration": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].detailedDurations.queuingDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"TransferDuration": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "String"
											},
											"UsedDIU": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartTime": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_MoviesDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_SAVE_ERROR_LOG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CP_DYN_FILES",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[usp_UpdateEtlLog]",
										"storedProcedureParameters": {
											"BillingDuration": {
												"value": {
													"value": "@float(activity('CP_DYN_FILES').output.billingReference.billableDuration[0].duration)",
													"type": "Expression"
												},
												"type": "Double"
											},
											"BillingMeterType": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"BillingUnit": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											},
											"CopyDuration": {
												"value": null,
												"type": "String"
											},
											"DataRead": {
												"value": null,
												"type": "String"
											},
											"DataWritten": {
												"value": null,
												"type": "String"
											},
											"EndTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EtlLogId": {
												"value": {
													"value": "@int(activity('LKP_START_LOG').output.firstRow.EtlLogId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FilesRead": {
												"value": null,
												"type": "String"
											},
											"ParallelCopiesValues": {
												"value": null,
												"type": "String"
											},
											"QueueDuration": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@activity('CP_DYN_FILES').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"TransferDuration": {
												"value": null,
												"type": "String"
											},
											"UsedDIU": {
												"value": null,
												"type": "String"
											},
											"StartTime": {
												"value": null,
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_MoviesDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-04T16:55:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_DynamicFile')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_MoviesDB')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ADLS_Movies_DS_SQL_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LKP_OverMetadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP_SQL_MetadataADF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('LKP_SQL_MetadataADF').output.value)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CP_DS_ADLS_Movies_DS_SQL_Movies",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "movies",
												"wildcardFileName": {
													"value": "@item().SourceFile",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE stg.', item().TargetTable,';')}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_Movies",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@item().SourceFile",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Movies",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().TargetTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LKP_SQL_MetadataADF",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [SourceFile]\n      ,[TargetTable]\n  FROM [dbo].[Metadata_ADF]\n  WHERE [isActive] ='Y'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_MetadataADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SP_LoadMoviesTables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LKP_OverMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateAllMoviesTbl]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_MoviesDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-01T17:21:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_MetadataADF')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ADLS_Online_To_DS_ASQL_Online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_IncrementalLoadOnline",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_SQL_WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{activity('LKP_SQL_WaterMark').output.firstRow.OldWatermarkValue}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@variables('CurentDate')",
										"type": "Expression"
									},
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table [stg].[online_purchase];",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "serviceName"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "serviceCode"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "movieId"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "userId"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "price"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "transaction.id"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "transaction.datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "source_filename"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "pipelineId"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_Online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_OnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP_LOAD_Online",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CP_IncrementalLoadOnline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateAllOnlineTbl]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@variables('CurentDate')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "OnlineStg",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_MoviesDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SETVAR_CurentDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurentDate",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LKP_SQL_WaterMark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SETVAR_CurentDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT WatermarkValue as OldWatermarkvalue FROM [dbo].[WatermarkTable]\nwhere TableName ='OnlineStg'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CurentDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-13T19:05:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Online')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_OnlinePurchase')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_WatermarkTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_ADLS_SrcMoviesArch_DS_ADLS_MoviesArch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_DS_ADLS_SrcMoviesArch_DS_ADLS_MoviesArch",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_SrcMoviesArch",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_MoviesArch",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-01T19:42:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SrcMoviesArch')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_MoviesArch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_OnlineBin_DS_OnlineArchBin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_OnlineToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_OnlineBin",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_OnlineArcBin",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-13T20:13:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_OnlineBin')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_OnlineArcBin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DS_SQL_CinemaTickets_DS_ASQL_CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT WatermarkValue as OldWatermarkvalue FROM [dbo].[WatermarkTable]\nwhere TableName ='Tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select MAX([TransactionDt]) as NewWatermarkvalue from [dbo].[Tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_CinemaTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CP_IncrementalTicketsLoad",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from  [dbo].[Tickets] where [TransactionDt] > '@{activity('LookupOldWaterMarkActivity').output.firstRow.OldWatermarkValue}' and [TransactionDt] <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table [stg].[cinema_tickets];",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_CinemaTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_CinemaTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP_LOAD_Tickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CP_IncrementalTicketsLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateAllCinemaTbl]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "Tickets",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_MoviesDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-08T06:15:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_WatermarkTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_CinemaTickets')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_CinemaTickets')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_DimensionTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_LOAD_DimMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LOAD_DimMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcMovies": {},
									"srcOnlineService": {},
									"trgDimMovie": {},
									"trgDimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-21T15:59:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_LOAD_DimMovies')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_FactsTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_LOAD_FactsFactPurchase",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LOAD_FactsFactPurchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srctOnlinePurchase": {},
									"srctOnlineService": {},
									"srcDimOnlineService": {},
									"srcMovies": {},
									"srcDimMovie": {},
									"tgtFactOnlinePurchase": {},
									"tgtFactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-21T16:21:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_LOAD_FactsFactPurchase')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FAILED_PIPELINE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "error",
							"errorCode": "201"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-08T20:30:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EP_CP_To_ADLS_Movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_ABLB_Movies_To_DS_ADLS_Movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EP_CP_To_SQL_Movies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EP_CP_To_ADLS_Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_ADLS_Movies_DS_SQL_Movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EP_CP_To_Arch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EP_CP_To_SQL_Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_ADLS_SrcMoviesArch_DS_ADLS_MoviesArch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T14:49:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_ABLB_Movies_To_DS_ADLS_Movies')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_ADLS_Movies_DS_SQL_Movies')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_ADLS_SrcMoviesArch_DS_ADLS_MoviesArch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Master_Online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EP_CP_Src_To_Lake_Online",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_ABLB_Online_To_DS_ADLS_Online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EP_CP_Lake_To_ASQL_Online",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EP_CP_Src_To_Lake_Online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_ADLS_Online_To_DS_ASQL_Online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EP_CP_Lake_To_Arch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EP_CP_Lake_To_ASQL_Online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_DS_OnlineBin_DS_OnlineArchBin",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-13T20:21:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_ABLB_Online_To_DS_ADLS_Online')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_ADLS_Online_To_DS_ASQL_Online')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_OnlineBin_DS_OnlineArchBin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RaiseFail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Error",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_MoviesBin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_Azurementoringstorageva",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "movies"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_Azurementoringstorageva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AzurementoringstoragevaOnline",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AzurementoringstoragevaOnline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_Azurementoringauva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "module-04"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_Azurementoringauva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_DynamicFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"column_delimiter": {
						"type": "string"
					},
					"encoding": {
						"type": "string"
					},
					"escape_character": {
						"type": "string"
					},
					"quote_character": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().column_delimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().escape_character",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().quote_character",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_LakeOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_MoviesArch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_MoviesBin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_OnlineArcBin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_OnlineBin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raitings",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SrcMoviesArch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_OnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_OnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_WatermarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "WatermarkTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_CinemaTickets",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_CinemaTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_MetadataADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SourceFile",
						"type": "nvarchar"
					},
					{
						"name": "TargetTable",
						"type": "nvarchar"
					},
					{
						"name": "isActive",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Metadata_ADF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_jo3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_MoviesDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_MoviesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_jo3_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_Azurementoringdatalakeva",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_rowDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "Object"
					},
					"cw_folderPath": {
						"type": "Object"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_jo3_20230529"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": {
						"value": "@dataset().cw_rowDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_Azurementoringdatalakeva')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_Azurementoringauva')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABLB_Azurementoringauva_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_Azurementoringstorageva')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_Mentoring_key_vault_va",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ABLB_Azurementoringstorageva_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_Mentoring_key_vault_va')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_Azurementoringdatalakeva')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_Azurementoringdatalakeva_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_AzurementoringstoragevaOnline')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_Mentoring_key_vault_va",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ADLS_AzurementoringstoragevaOnline_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_Mentoring_key_vault_va')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AKV_Mentoring_key_vault_va')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_Mentoring_key_vault_va_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_DataMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_DataMart_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_Mentoring_key_vault_va",
							"type": "LinkedServiceReference"
						},
						"secretName": "data-mart-user-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_Mentoring_key_vault_va')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_MoviesDB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_Mentoring_key_vault_va",
							"type": "LinkedServiceReference"
						},
						"secretName": "movies-user-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_Mentoring_key_vault_va')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_CinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_CinemaTickets_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_Mentoring_key_vault_va",
							"type": "LinkedServiceReference"
						},
						"secretName": "cinema-tickets-user-password"
					}
				},
				"connectVia": {
					"referenceName": "SetfHostedRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SetfHostedRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_Mentoring_key_vault_va')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgTicketsLoad')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_DATA_DS_SQL_CinemaTickets_DS_ASQL_CinemaTickets",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-08T06:26:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_DS_SQL_CinemaTickets_DS_ASQL_CinemaTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SetfHostedRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LOAD_DimMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_Movies",
								"type": "DatasetReference"
							},
							"name": "srcMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_OnlineService",
								"type": "DatasetReference"
							},
							"name": "srcOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimMovie",
								"type": "DatasetReference"
							},
							"name": "trgDimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "trgDimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "auditMoviesColumns"
						},
						{
							"name": "auditOnlineServiceColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcMovies",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcOnlineService",
						"srcMovies derive(CreatedDate = currentDate(),",
						"          ModifiedDate = currentDate()) ~> auditMoviesColumns",
						"srcOnlineService derive(CreatedDate = currentDate(),",
						"          ModifiedDate = currentDate()) ~> auditOnlineServiceColumns",
						"auditMoviesColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table [dbo].[DimMovie]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusId,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> trgDimMovie",
						"auditOnlineServiceColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table [dbo].[DimOnlineService]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> trgDimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_OnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LOAD_FactsFactPurchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "srctOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_OnlineService",
								"type": "DatasetReference"
							},
							"name": "srctOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "srcDimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_Movies",
								"type": "DatasetReference"
							},
							"name": "srcMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimMovie",
								"type": "DatasetReference"
							},
							"name": "srcDimMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tgtFactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "tgtFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "mappingServiceIdAndServiceKey"
						},
						{
							"name": "selectServiceIdAndServiceKey"
						},
						{
							"name": "mappingMovieIdandMovieKey"
						},
						{
							"name": "selectMovieIdandMovieKey"
						},
						{
							"name": "prepareTargetDataset"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "joinDimMovie"
						},
						{
							"name": "castTransactionDateToIntDay"
						},
						{
							"name": "AggregationForTransaction"
						},
						{
							"name": "castTransactionDateToMonth"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srctOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srctOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimMovie",
						"srctOnlineService, srcDimOnlineService join(ServiceId == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> mappingServiceIdAndServiceKey",
						"mappingServiceIdAndServiceKey select(mapColumn(",
						"          ServiceId,",
						"          ServiceKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectServiceIdAndServiceKey",
						"srcMovies, srcDimMovie join(srcMovies@MovieIdNK == srcDimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> mappingMovieIdandMovieKey",
						"mappingMovieIdandMovieKey select(mapColumn(",
						"          MovieId,",
						"          MovieKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMovieIdandMovieKey",
						"castTransactionDateToIntDay select(mapColumn(",
						"          TransactionDate,",
						"          ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> prepareTargetDataset",
						"srctOnlinePurchase, selectServiceIdAndServiceKey join(srctOnlinePurchase@ServiceId == selectServiceIdAndServiceKey@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"joinDimOnlineService, selectMovieIdandMovieKey join(srctOnlinePurchase@MovieId == selectMovieIdandMovieKey@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimMovie",
						"joinDimMovie derive(TransactionDate = toInteger(toString(TransactionDate,  'yyyyMMdd'))) ~> castTransactionDateToIntDay",
						"castTransactionDateToMonth aggregate(groupBy(TransactionDate,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count()) ~> AggregationForTransaction",
						"prepareTargetDataset derive(TransactionDate = toInteger(substring(toString(TransactionDate),0,6))) ~> castTransactionDateToMonth",
						"prepareTargetDataset sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table  [dbo].[FactOnlinePurchase]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> tgtFactOnlinePurchase",
						"AggregationForTransaction sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table [dbo].[FactOnlinePurchase_MonthlySnapshot] '],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> tgtFactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_OnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_FactOnlinePurchase_MonthlySnapshot')]"
			]
		}
	]
}